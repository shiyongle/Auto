package com.pc.appInterface.order;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.format.Format;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.codec.binary.BinaryCodec;
import org.apache.tomcat.util.http.fileupload.FileItem;
import org.apache.tomcat.util.http.fileupload.FileUploadException;
import org.apache.tomcat.util.http.fileupload.disk.DiskFileItemFactory;
import org.apache.tomcat.util.http.fileupload.servlet.ServletFileUpload;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import cn.org.rapid_framework.page.Page;

import com.pc.appInterface.api.DongjingClient;
import com.pc.controller.BaseController;
import com.pc.dao.Car.ICarDao;
import com.pc.dao.UserRole.IUserRoleDao;
import com.pc.dao.addto.IaddtoDao;
import com.pc.dao.carRanking.IcarRankingDao;
import com.pc.dao.clUpload.IuploadDao;
import com.pc.dao.identification.impl.IdentificationDao;
import com.pc.dao.order.impl.OrderDao;
import com.pc.dao.orderCarDetail.IorderCarDetailDao;
import com.pc.dao.orderDetail.IorderDetailDao;
import com.pc.dao.protocol.IprotocolDao;
import com.pc.dao.rule.IRuleDao;
import com.pc.dao.select.IUtilOptionDao;
import com.pc.model.CL_Abnormity;
import com.pc.model.CL_Addto;
import com.pc.model.CL_Car;
import com.pc.model.CL_CarRanking;
import com.pc.model.CL_Feedback;
import com.pc.model.CL_Identification;
import com.pc.model.CL_Order;
import com.pc.model.CL_OrderCarDetail;
import com.pc.model.CL_OrderDetail;
import com.pc.model.CL_Protocol;
import com.pc.model.CL_Rule;
import com.pc.model.CL_UserRole;
import com.pc.model.Cl_Upload;
import com.pc.model.Util_Option;
import com.pc.model.Util_UserOnline;
import com.pc.query.order.OrderQuery;
import com.pc.util.CacheUtilByCC;
import com.pc.util.CalcTotalField;
import com.pc.util.ImageUtil;
import com.pc.util.JSONUtil;
import com.pc.util.LatitudeLongitudeDI;
import com.pc.util.ServerContext;

@Controller
public class AppOrderControll extends BaseController {
	@Resource
	private IUtilOptionDao optionDao;
	@Resource
	private IRuleDao ruleDao;
	@Resource
	private OrderDao orderDao;
	@Resource
	private IorderDetailDao orderDetailDao;
	@Resource
	private IUserRoleDao userRoleDao;
	@Resource
	private IorderCarDetailDao orderCarDetailDao;
	@Resource
	private ICarDao cardao;
	@Resource
	private IprotocolDao protocolDao;
	@Resource
	private IuploadDao iuploadDao;
	@Resource
	private IaddtoDao iaddtoDao;
	@Resource
	private IdentificationDao identificationDao;
	@Resource
	private IcarRankingDao icarRankingDao;

	private OrderQuery orderQuery;
	public OrderQuery getOrderQuery() {
		return orderQuery;
	}
	public void setOrderQuery(OrderQuery orderQuery) {
		this.orderQuery = orderQuery;
	}

	/***获取所有车厢（所有车辆规格）*/
	@RequestMapping("/app/order/loadSpec")
	public String loadSpec(HttpServletRequest request,HttpServletResponse response) throws IOException{
		List<Util_Option> list = optionDao.getAllCarType();
		HashMap<String, Object> m = new HashMap<String, Object>();
		m.put("success", "true");
		m.put("data", list);
		System.out.println(m.get("data"));
		return writeAjaxResponse(response, JSONUtil.getJson(m));
	}

	/***根据车厢规格id获得车辆类型*/
	@RequestMapping("/app/order/loadCarType")
	public String loadCarType(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer optionId;
		HashMap<String, Object> map = new HashMap<String, Object>();
		if(request.getParameter("optionId")==null || "".equals(request.getParameter("optionId"))){
			map.put("success", "false");
			map.put("msg","请先登录");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			optionId = Integer.parseInt(request.getParameter("optionId"));
		}
		List<Util_Option> list = optionDao.getAllCarSpecByCarType(optionId);
		map.put("success", "true");
		map.put("data", list);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/***根据车厢规格id获得其他要求*/
	@RequestMapping("/app/order/CarOther")
	public String CarOther(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer optionId;
		HashMap<String, Object> map = new HashMap<String, Object>();
		if(request.getParameter("optionId")==null || "".equals(request.getParameter("optionId"))){
			map.put("success", "false");
			map.put("msg","请先登录");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			optionId = Integer.parseInt(request.getParameter("optionId"));
		}
		List<Util_Option> list = optionDao.getOtherByCarSpec(optionId);
		map.put("success", "true");
		map.put("data", list);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/***获取所有货物类型*/
	@RequestMapping("/app/order/loadGoods")
	public String loadGoods(HttpServletRequest request,HttpServletResponse response) throws IOException{
		List<Util_Option> list = optionDao.getAllGoodsType();
		HashMap<String, Object> m = new HashMap<String, Object>();
		m.put("success", "true");
		m.put("data", list);
		System.out.println(m.get("data"));
		return writeAjaxResponse(response, JSONUtil.getJson(m));
	}

	/***新增协议订单*/
	@RequestMapping("/app/order/saveProtocolOrder")
	@Transactional
	public   String saveProtocolOrder(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer userroleId,orderType,specId= null,protocolId=null,fopint=1 ,funitId=null,freceiptSave=0,userId;
		String orderString,addressDeliverString,addressReceiptString=null,carTypeId=null,otherId=null,fremark=null,versionCode=null,fsystem="";
		HashMap<String, Object> map = new HashMap<String, Object>();
		if(request.getParameter("id")==null || "".equals(request.getParameter("id"))){
			map.put("success", "false");
			map.put("msg","请先登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userroleId = Integer.parseInt(request.getParameter("id"));
		}
		
		//APP强制更新；
		HashMap<String, Util_UserOnline> useronline = ServerContext.getUseronline();
		if(request.getSession().getId()==null || request.getSession().getId().equals("")){
			map.put("success", "false");
			map.put("msg","登录超时！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		versionCode = useronline.get(request.getSession().getId().toString()).getVersionCode();
		if (versionCode == null || "".equals(versionCode)) {
			map.put("success", "false");
			map.put("msg", "请重新登录更新APP后再下单，谢谢合作！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else {
			BigDecimal bVersionCode = new BigDecimal(versionCode);
			fsystem = useronline.get(request.getSession().getId().toString()).getFsystem();
			if(CacheUtilByCC.isOldVersion(bVersionCode, fsystem)){
				map.put("success", "false");
				map.put("msg", "请重新登录更新APP后再下单，谢谢合作！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
		}
		
		//20160530业务再次确认个人认证跳过允许下单;
		//新增下单前认证审核通过判断，开始;
		CL_Order order =new CL_Order();
//		CL_UserRole userinfo = userRoleDao.getById(userroleId);
//		if(userinfo.isPassIdentify()){
			order.setIdentifyType(3);
//		}else{
//			List<CL_Identification> identifications = identificationDao.getStatusByUserRoleId(userroleId);
//			map.put("success", "true");
////				order.setIdentifyType());//认证状态值：3正常下单;0 跳到认证界面;1 直接提示拨打客服电话通过认证; 2 跳到认证结果界面
//			map.put("data","{\"identifyType\":\""+identifications.get(0).getStatus()+"\"}");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}
		//新增下单前认证审核通过判断，结束;
		
		if(request.getParameter("fremark")==null || "".equals(request.getParameter("fremark"))){
			fremark=request.getParameter("fremark");
		}else{
			fremark = request.getParameter("fremark").replaceAll("[\\ud800\\udc00-\\udbff\\udfff\\ud800-\\udfff]", "");
		}
		
		if(request.getParameter("protocolId")==null || "".equals(request.getParameter("protocolId"))){
			map.put("success", "false");
			map.put("msg","该用户不是协议用户");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			protocolId=Integer.parseInt(request.getParameter("protocolId"));
		}
		CL_Protocol protocol=protocolDao.getById(protocolId);
		if(protocol.getStatus()==0){
			map.put("success", "false");
			map.put("msg","该协议已经失效");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		if(request.getParameter("orderType")==null || "".equals(request.getParameter("orderType"))){
			map.put("success", "false");
			map.put("msg","无法获知订单类型！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			orderType = Integer.parseInt(request.getParameter("orderType"));
		} 
		if(orderType==1||orderType==3){
			if(request.getParameter("specId")==null || "".equals(request.getParameter("specId"))||request.getParameter("specId")=="null"){
				map.put("success", "false");
				map.put("msg","请选择车厢！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				specId = Integer.parseInt(request.getParameter("specId"));
			}
			if(request.getParameter("carTypeId")==null || "".equals(request.getParameter("carTypeId"))||request.getParameter("carTypeId")=="null"){
				map.put("success", "false");
				map.put("msg","请选择车型！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				carTypeId = request.getParameter("carTypeId");
			}
			otherId = request.getParameter("otherId");
		}
		if(request.getParameter("order")==null || "".equals(request.getParameter("order"))){
			map.put("success", "false");
			map.put("msg","请先录入订单信息！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			orderString =request.getParameter("order")  ; 
		}
		if(request.getParameter("fopint")==null || "".equals(request.getParameter("fopint"))){
			fopint=1;
		}else{
			fopint =Integer.valueOf(request.getParameter("fopint").toString()) ; 
		}
		if(request.getParameter("addressDeliver")==null || "".equals(request.getParameter("addressDeliver"))){
			map.put("success", "false");
			map.put("msg","请先选择发货地址！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			addressDeliverString = request.getParameter("addressDeliver"); 
		}
		
		if(protocol.getType()!=3){
			if(request.getParameter("addressReceipt")==null || "".equals(request.getParameter("addressReceipt"))){
				map.put("success", "false");
				map.put("msg","请先选择收货地址！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				addressReceiptString = request.getParameter("addressReceipt"); 
			}
		} 
		JSONArray jsonsorder = JSONArray.fromObject(orderString);
//		CL_Order order =new CL_Order();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		order.setType(jsonsorder.getJSONObject(0).getInt("type"));//订单类型
		order.setGoodsTypeId(jsonsorder.getJSONObject(0).get("goodsTypeId").toString());//货物类型ID
		order.setGoodsTypeName(jsonsorder.getJSONObject(0).get("goodsTypeName").toString());//货物类型名称
		order.setCreateTime(new Date());
		try {
			 Date loadTime =format.parse(jsonsorder.getJSONObject(0).get("loadedTime").toString());
			 long time=loadTime.getTime()-order.getCreateTime().getTime();
			 long ss=time-60*60000;
			 if(ss>=0){
				 order.setLoadedTime(format.parse(jsonsorder.getJSONObject(0).get("loadedTime").toString()));
			 }
			 else{
				 map.put("success", "false");
				 map.put("msg","装车时间必须大于创建时间一小时！");
				 return writeAjaxResponse(response, JSONUtil.getJson(map));
			 }
		} catch (ParseException e) {
			e.printStackTrace();
		}
		if(protocol.getType()!=3){
			order.setMileage(new BigDecimal(jsonsorder.getJSONObject(0).get("mileage").toString()).setScale(1,BigDecimal.ROUND_HALF_UP));//里程
		}
		order.setCreator(userroleId);//创建人
		order.setOperator(userroleId);//操作人ID
		order.setProtocolId(protocolId);//协议表IDf
		order.setFremark(fremark);
		order.setFopint(fopint);
		order.setProtocolType(1);
		if(protocol.getFunitId()!=null){
			order.setFunitId(protocol.getFunitId());	
		}
		//		============================================协议计算运费=============开始=====================================//
		if(order.getType()==1){//整车计算运费
			if(protocol!=null){
				//实际运输距离大于规则起步公里数:运费=(规则起步价+(实际距离-规则起步公里数)×规则公里单价)
				if(order.getMileage().compareTo(protocol.getStartKilometre())==1){
					BigDecimal km = order.getMileage().subtract(protocol.getStartKilometre());//减法
					BigDecimal fee1 =km.multiply(protocol.getOutKilometre());//乘法
					BigDecimal opintprice=new BigDecimal(0);
					if(fopint>protocol.getFopint()){
						Integer foutopint=fopint-protocol.getFopint();
						opintprice=protocol.getFoutopint().multiply(new BigDecimal(foutopint));
					}
					if(protocol.getFdiscount()!=null){
						BigDecimal dis=protocol.getFdiscount();//折扣
						BigDecimal fre= protocol.getStartPrice().add(fee1).add(opintprice); //协议折扣运费
						order.setFreight(fre.multiply(dis).setScale(1, BigDecimal.ROUND_HALF_UP));
					}
					else{
						order.setFreight(protocol.getStartPrice().add(fee1).add(opintprice).setScale(1, BigDecimal.ROUND_HALF_UP));//加法 无折扣情况下的运费
					}
					//实际运输距离小于/等于规则起步公里数:运费=规则起步价
				}else if(order.getMileage().compareTo(protocol.getStartKilometre())==-1 || order.getMileage().compareTo(protocol.getStartKilometre())==0){
					if(protocol.getFdiscount()!=null){
						BigDecimal dis=protocol.getFdiscount();
						BigDecimal opintprice=new BigDecimal(0);
						if(fopint>protocol.getFopint()){
							Integer foutopint=fopint-protocol.getFopint();
							opintprice=protocol.getFoutopint().multiply(new BigDecimal(foutopint));
						}
						BigDecimal fre=opintprice.add(protocol.getStartPrice());
						order.setFreight(fre.multiply(dis).setScale(1, BigDecimal.ROUND_HALF_UP));
					}else{
						BigDecimal opintprice=new BigDecimal(0);
						if(fopint>protocol.getFopint()){
							Integer foutopint=fopint-protocol.getFopint();
							opintprice=protocol.getFoutopint().multiply(new BigDecimal(foutopint));
						}
						order.setFreight(protocol.getStartPrice().add(opintprice).setScale(1, BigDecimal.ROUND_HALF_UP));
					}
				}
			}else{
				map.put("success", "false");
				map.put("msg","所选车厢,规则遗失,请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
		}else if(order.getType()==2){//零担计算运费
			order.setLength(new BigDecimal(jsonsorder.getJSONObject(0).get("length").toString()));//长度
			if(new BigDecimal(jsonsorder.getJSONObject(0).get("famount").toString()).compareTo(new BigDecimal(0))==1){
				order.setFamount(new BigDecimal(jsonsorder.getJSONObject(0).get("famount").toString()));
			}
			if(protocol!=null){
				BigDecimal opintprice=new BigDecimal(0);
				if(fopint>protocol.getFopint()){
					Integer foutopint=fopint-protocol.getFopint();
					opintprice=protocol.getFoutopint().multiply(new BigDecimal(foutopint));
				}
				BigDecimal price=protocol.getStartPrice() ;
				if(order.getMileage().compareTo(protocol.getStartKilometre())==1){
					BigDecimal km=order.getMileage().subtract(protocol.getStartKilometre());//减法
					BigDecimal feel=km.multiply(protocol.getOutKilometre());//乘法
					price=price.add(feel);
				} 
				if(order.getFamount().compareTo(protocol.getStartNumber())==1){
					BigDecimal number=order.getFamount().subtract(protocol.getStartNumber());//减法
					BigDecimal feelNumber=number.multiply(protocol.getOutNumprice());//乘法
					price=price.add(feelNumber);
				} 
				order.setFreight(price.add(opintprice).setScale(1,BigDecimal.ROUND_HALF_UP));
			}else{
				map.put("success", "false");
				map.put("msg","零担规则遗失,请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
		}else if(order.getType()==3){//包天计费规则
			if(protocol!=null){
				order.setFreight(protocol.getTimePrice().setScale(1,BigDecimal.ROUND_HALF_UP));
			}
			else{
				map.put("success", "false");
				map.put("msg","包天规则遗失,请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map)); 
			}
		}
		order.setNumber(CacheUtilByCC.getOrderNumber(new String("CL_Order"), new String ("O"), 8));
		order.setStatus(1);
		JSONArray addressDel = JSONArray.fromObject(addressDeliverString);
		JSONArray addressRec = JSONArray.fromObject(addressReceiptString);
		
		
		/**计算运费 Start*/
		order.setFdriverfee(order.getFreight().multiply(CalcTotalField.calDriverFee(order.getFreight())).setScale(1,BigDecimal.ROUND_HALF_UP));
		/**计算运费 End*/		
		
		
		this.orderDao.save(order);
		//============================================整车计算运费=============结束=====================================//
		//===================== 增加订单车辆明细===============================开始=====================================//
		if(order.getType()==1 ||order.getType()==3 ){
			String[] carTypeString=carTypeId.split(",");
			if(otherId!=null && !"".equals(otherId) && !otherId.contains("null")){
				String[] carOtherString=otherId.split(",");
				for(int m=0;m<carOtherString.length;m++){
					for(int n=0;n<carTypeString.length;n++){
						CL_OrderCarDetail orderCarDetail1=new CL_OrderCarDetail();
						orderCarDetail1.setOrderId(order.getId());
						orderCarDetail1.setCarSpecId(specId);
						System.out.println(carTypeString[n]);
						System.out.println(Integer.valueOf(carTypeString[n]));
//						if(Integer.valueOf(carTypeString[n])>22){
//							System.out.println("**********************数据有问题************************"+order.getNumber());
//							map.put("success", "false");
//							map.put("msg","车辆类型数据有误！");
//							return writeAjaxResponse(response, JSONUtil.getJson(map)); 
//						}
						orderCarDetail1.setCarTypeId(Integer.valueOf(carTypeString[n]));
						orderCarDetail1.setCarOtherId(Integer.valueOf(carOtherString[m]));
						orderCarDetail1.setCreateTime(new Date());
						orderCarDetailDao.save(orderCarDetail1);
					}
				}
			}else{
				for(int i=0;i<carTypeString.length;i++){
					CL_OrderCarDetail orderCarDetail2=new CL_OrderCarDetail();
					orderCarDetail2.setOrderId(order.getId());
					orderCarDetail2.setCarSpecId(specId);
//					if(Integer.valueOf(carTypeString[i])>22){
//						System.out.println("**********************数据有问题************************"+order.getNumber());
//						map.put("success", "false");
//						map.put("msg","车辆类型数据有误！");
//						return writeAjaxResponse(response, JSONUtil.getJson(map)); 
//					}
					orderCarDetail2.setCarTypeId(Integer.valueOf(carTypeString[i]));
					orderCarDetail2.setCreateTime(new Date());
					orderCarDetailDao.save(orderCarDetail2);
				}
			}
		}
		
		//===================== 增加订单车辆明细===============================结束=====================================//
		this.createDetail(addressDel,order.getId(),1,freceiptSave);
		if(protocol.getType()!=3){
			this.createDetail(addressRec,order.getId(),2,freceiptSave);
		}
		order.setFreight(order.getFreight().setScale(1, BigDecimal.ROUND_HALF_UP));
		JSONArray JOArry=new JSONArray();
		String [] title= new String[]{"装卸","电子回单","回单原件","上楼","代收货款"};
		String [] context=new String []{"线下协商、支付","免费","线下协商、支付","线下协商、支付","免费"};
		for(int i=0;i<title.length;i++){
			JSONObject  JO=new JSONObject();
			JO.put("id", i);
			JO.put("title", title[i]);
			JO.put("context",context[i]);
			JO.put("isc", 0);
			JOArry.add(i,JO);
		}
		if(order.getType()!=3){
			order.setServer(JOArry);
			//			order.setServer("[{\"id\":\"0\",\"title\":\"装卸\",\"context\":\"线下协商、支付\",\"isc\":\"0\"},{\"id\":\"1\",\"title\":\"电子回单\",\"context\":\"免费\",\"isc\":\"0\"},{\"id\":\"2\",\"title\":\"回单原件\",\"context\":\"免费\",\"isc\":\"0\"},{\"id\":\"3\",\"title\":\"上楼\",\"context\":\"线下协商、支付\",\"isc\":\"0\"},{\"id\":\"4\",\"title\":\"代收货款\",\"context\":\"免费\",\"isc\":\"0\"}]");

		}
		  
	   if(userRoleDao.getById(userroleId).isProtocol()){
		   //根据卸货地址数判断是否可以支持运费到付     BY  CC  2016-05-17 START
		   if(addressRec.size()==1)
		   {
			   order.setPayMethod("0,1,2,3,4,5");
		   }
		   else
		   {
			   order.setPayMethod("0,1,2,3,5");
		   }
		   
		 //根据卸货地址数判断是否可以支持运费到付     BY  CC  2016-05-17 END
			 //order.setPayMethod("0,1,2,3,4,5");//2016-05-17 CC BAK
	   }
	   else{
		 //根据卸货地址数判断是否可以支持运费到付     BY  CC  2016-05-17 START
		   if(addressRec.size()==1)
		   {
			   order.setPayMethod("0,1,2,3,4");
		   }
		   else
		   {
			   order.setPayMethod("0,1,2,3");
		   }
		//根据卸货地址数判断是否可以支持运费到付     BY  CC  2016-05-17 end 
        //order.setPayMethod("0,1,2,3,4");//2016-05-17 CC BAK
	   }
		map.put("success", "true");
		map.put("data",order);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/**
	 * 字符串转换unicode
	 */
	//	 public  String stringToUnicode(String string) {
	//	     StringBuffer unicode = new StringBuffer();
	//	     for (int i = 0; i < string.length(); i++) {
	//	         // 取出每一个字符
	//	        char c = string.charAt(i);
	//	         // 转换为unicode
	//	         unicode.append("\\u" + Integer.toHexString(c));
	//	     }
	//	     return unicode.toString();
	//	 }
	//
	//	 private String Emoji2unicode(String s)
	//	 {
	//		 String result="";
	//		 for(int i=0;i<s.length();i++)
	//		 { 
	//			 s.matches(regex)
	//		 }
	//		 return result;
	//	 }
	//	 
	//	 

	/***新增订单*/
	@RequestMapping("/app/order/saveOrder")
	@Transactional
	public  String saveOrder(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer userroleId,orderType=null,specId= null,fopint=1,freceiptSave=0;
		String orderString,addressDeliverString,addressReceiptString,carTypeId=null,otherId=null,fremark=null,versionCode=null,fsystem = "";
		BigDecimal vod=new BigDecimal(0);
		BigDecimal weh=new BigDecimal(0);
		BigDecimal vodtoWeh=new BigDecimal(0);
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		if(request.getParameter("id")==null || "".equals(request.getParameter("id"))){
			map.put("success", "false");
			map.put("msg","请先登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userroleId = Integer.parseInt(request.getParameter("id"));
		}
		
		//APP强制更新；
		HashMap<String, Util_UserOnline> useronline = ServerContext.getUseronline();
		if(request.getSession().getId()==null || request.getSession().getId().equals("")){
			map.put("success", "false");
			map.put("msg","登录超时！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		versionCode = useronline.get(request.getSession().getId().toString()).getVersionCode();
		if (versionCode == null || "".equals(versionCode)) {
			map.put("success", "false");
			map.put("msg", "请重新登录更新APP后再下单，谢谢合作！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else {
			BigDecimal bVersionCode = new BigDecimal(0);
			bVersionCode=new BigDecimal(versionCode);
			fsystem = useronline.get(request.getSession().getId().toString()).getFsystem();
			if(CacheUtilByCC.isOldVersion(bVersionCode, fsystem)){
				map.put("success", "false");
				map.put("msg", "请重新登录更新APP后再下单，谢谢合作！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
		}
		
		//20160530业务再次确认个人认证跳过允许下单;
		//新增下单前认证审核通过判断，开始;
		CL_Order order =new CL_Order();
//		CL_UserRole userinfo = userRoleDao.getById(userroleId);
//		if(userinfo.isPassIdentify()){
			order.setIdentifyType(3);
//		}else{
//			List<CL_Identification> identifications = identificationDao.getStatusByUserRoleId(userroleId);
//			map.put("success", "true");
////				order.setIdentifyType());//认证状态值：3正常下单;0 跳到认证界面;1 直接提示拨打客服电话通过认证; 2 跳到认证结果界面
//			map.put("data","{\"identifyType\":\""+identifications.get(0).getStatus()+"\"}");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}
		//新增下单前认证审核通过判断，结束;
		
		if(request.getParameter("fremark")==null || "".equals(request.getParameter("fremark"))){
			fremark=request.getParameter("fremark");
		}else{
			fremark = request.getParameter("fremark").replaceAll("[\\ud800\\udc00-\\udbff\\udfff\\ud800-\\udfff]", "");
		}
	//	getRequestParameter(request, response, map, "无法获知订单类型！","orderType",orderType);
		if(request.getParameter("orderType")==null || "".equals(request.getParameter("orderType"))){
			map.put("success", "false");
			map.put("msg","无法获知订单类型！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			orderType = Integer.parseInt(request.getParameter("orderType"));
		}
 		if(request.getParameter("fopint")==null || "".equals(request.getParameter("fopint"))){
			fopint=1;
		}else{
			fopint =Integer.valueOf(request.getParameter("fopint").toString()) ; 
		}
 	
		if(orderType==1){
			if(request.getParameter("specId")==null || "".equals(request.getParameter("specId"))){
				map.put("success", "false");
				map.put("msg","请选择车厢！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				specId = Integer.parseInt(request.getParameter("specId"));
			}
			if(request.getParameter("carTypeId")==null || "".equals(request.getParameter("carTypeId"))){
				map.put("success", "false");
				map.put("msg","请选择车型！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				carTypeId = request.getParameter("carTypeId");
			}
			otherId = request.getParameter("otherId");
		}
		if(request.getParameter("order")==null || "".equals(request.getParameter("order"))){
			map.put("success", "false");
			map.put("msg","请先录入订单信息！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			orderString =request.getParameter("order")  ; 
		}
		if(request.getParameter("addressDeliver")==null || "".equals(request.getParameter("addressDeliver"))){
			map.put("success", "false");
			map.put("msg","请先选择发货地址！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			addressDeliverString = request.getParameter("addressDeliver"); 
		}
		if(request.getParameter("addressReceipt")==null || "".equals(request.getParameter("addressReceipt"))|| request.getParameter("addressReceipt").equals("[]")){
			map.put("success", "false");
			map.put("msg","请先选择收货地址！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			addressReceiptString = request.getParameter("addressReceipt"); 
		}
		JSONArray jsonsorder = JSONArray.fromObject(orderString);
//		CL_Order order =new CL_Order();
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		order.setType(jsonsorder.getJSONObject(0).getInt("type"));//订单类型
		order.setGoodsTypeId(jsonsorder.getJSONObject(0).get("goodsTypeId").toString());//货物类型ID
		order.setGoodsTypeName(jsonsorder.getJSONObject(0).get("goodsTypeName").toString());//货物类型名称
		if(jsonsorder.getJSONObject(0).get("volume")!=null&&!"".equals(jsonsorder.getJSONObject(0).get("volume").toString())) {
			vod = new BigDecimal(jsonsorder.getJSONObject(0).get("volume").toString());//体积
			vodtoWeh=vod.multiply(new BigDecimal(200));
		}
	    order.setVolume(vod);//体积
	    if(jsonsorder.getJSONObject(0).get("weight")!=null&&!"".equals(jsonsorder.getJSONObject(0).get("weight").toString())){
	    	weh=new BigDecimal(jsonsorder.getJSONObject(0).get("weight").toString());//重量
	    }
		order.setWeight(weh);
	//	weh=weh.multiply(new BigDecimal(1000));  重量 *1000按公斤算
		order.setLength(new BigDecimal(jsonsorder.getJSONObject(0).get("length").toString()));//长度
		order.setCreateTime(new Date());
		try {
			 Date loadTime =format.parse(jsonsorder.getJSONObject(0).get("loadedTime").toString());
			 long time=loadTime.getTime()-order.getCreateTime().getTime();
			 long ss=time-60*60000;
			 if(ss>=0){
				 order.setLoadedTime(format.parse(jsonsorder.getJSONObject(0).get("loadedTime").toString()));
			 }
			 else{
				 map.put("success", "false");
				 map.put("msg","装车时间必须大于创建时间一小时！");
				 return writeAjaxResponse(response, JSONUtil.getJson(map));
			 }
		} catch (ParseException e) {
			e.printStackTrace();
		}
		if(jsonsorder.getJSONObject(0).get("mileage").toString()!=null&& "".equals(jsonsorder.getJSONObject(0).get("mileage").toString())){
			map.put("success", "false");
			map.put("msg","请输入里程数！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		else{
			order.setMileage(new BigDecimal(jsonsorder.getJSONObject(0).get("mileage").toString()).setScale(1,BigDecimal.ROUND_HALF_UP));//里程
		}
		order.setCreator(userroleId);//创建人
		order.setFremark(fremark);
		order.setOperator(userroleId);//
		order.setFopint(fopint);
		order.setProtocolType(0);

		//============================================计算运费=============开始=====================================//
		if(order.getType()==1){//整车计算运费
			CL_Rule rule =this.ruleDao.getZhengche(specId);
			if(rule!=null){
				BigDecimal opintprice=new BigDecimal(0);
				Integer foutopint=0;
				if(fopint>rule.getFopint()){
					foutopint = fopint - rule.getFopint();
					opintprice=rule.getOutfopint().multiply(new BigDecimal(foutopint));
				}
				opintprice=rule.getOutfopint().multiply(new BigDecimal(foutopint));
				//实际运输距离大于规则起步公里数:运费=(规则起步价+(实际距离-规则起步公里数)×规则公里单价)
				if(order.getMileage().compareTo(rule.getStartKilometre())==1){
					BigDecimal km = order.getMileage().subtract(rule.getStartKilometre());//减法
					BigDecimal fee1 =km.multiply(rule.getKilometrePrice());//乘法
					order.setFreight(rule.getStartPrice().add(fee1).add(opintprice).setScale(1, BigDecimal.ROUND_HALF_UP));//加法
					//实际运输距离小于/等于规则起步公里数:运费=规则起步价
				}else if(order.getMileage().compareTo(rule.getStartKilometre())==-1 || order.getMileage().compareTo(rule.getStartKilometre())==0){
					order.setFreight(rule.getStartPrice().add(opintprice).setScale(1, BigDecimal.ROUND_HALF_UP));
				}
			}else{
				map.put("success", "false");
				map.put("msg","所选车厢,规则遗失,请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
		}else if(order.getType()==2){//零担计算运费
		//CL_Rule ruleVol =this.ruleDao.getLingdanForVolume();
		// ruleWeh =this.ruleDao.getLingdanForWeight();
		//	BigDecimal opintprice=new BigDecimal(0);
		//	BigDecimal Wehopintprice=new BigDecimal(0);
		//	Integer foutopint=0;
//			if(fopint>ruleVol.getFopint()){
//				foutopint=fopint-ruleVol.getFopint();
//				opintprice=ruleVol.getOutfopint().multiply(new BigDecimal(foutopint));
//			}
//			if(fopint>ruleWeh.getFopint()){
//				foutopint=fopint-ruleWeh.getFopint();
//				Wehopintprice=ruleWeh.getOutfopint().multiply(new BigDecimal(foutopint));
//
//			}
			//			 	Integer foutopint=fopint+1-ruleVol.getFopint();
			//				 BigDecimal opintprice=ruleVol.getOutfopint().multiply(new BigDecimal(foutopint));
//			if(ruleVol!=null && ruleWeh!=null){
//				BigDecimal volfee = ruleVol.getStartPrice().add(opintprice).add(order.getVolume().subtract(new BigDecimal("1")).multiply(ruleVol.getOutPrice()));
//				BigDecimal wehfee = ruleWeh.getStartPrice().add(Wehopintprice).add(order.getWeight().subtract(new BigDecimal("1")).multiply(ruleWeh.getOutPrice()));
//				//按体积计算运费大于按重量计算的运费
//				if(order.getVolume().compareTo(new BigDecimal("1"))==-1 && order.getWeight().compareTo(new BigDecimal("1"))==-1){
//					if(ruleVol.getStartPrice().compareTo(ruleWeh.getStartPrice())==1){
//						order.setFreight(ruleVol.getStartPrice().add(opintprice).setScale(1, BigDecimal.ROUND_HALF_UP));
//					}else{
//						order.setFreight(ruleWeh.getStartPrice().add(Wehopintprice).setScale(1, BigDecimal.ROUND_HALF_UP));
//					}
//				}else if(volfee.compareTo(wehfee)==1){
//					order.setCollection(2);
//					order.setFreight(volfee.setScale(1, BigDecimal.ROUND_HALF_UP));
//				}else{
//					order.setCollection(1);
//					order.setFreight(wehfee.setScale(1, BigDecimal.ROUND_HALF_UP));
//				}
//			}else{
//				map.put("success", "false");
//				map.put("msg","零担规则遗失,请联系客服");
//				return writeAjaxResponse(response, JSONUtil.getJson(map));
//			}
			//  2016-6-18 新需求 按重量（公斤）区间来算 价格  BY twr start
			BigDecimal finalWeight=new BigDecimal(0);
			if(vodtoWeh.compareTo(weh)<=0){
			     finalWeight=weh;
			 	order.setCollection(1);  //按重量计算 为1
			}else if(vodtoWeh.compareTo(weh)==1){
				 finalWeight=vodtoWeh;
				 order.setCollection(2);  //按体积计算  为2
				 
			}
//			finalWeight=finalWeight.subtract(new BigDecimal(75));//保底公斤
			if(finalWeight.compareTo(new BigDecimal(75))<=0){//保底公斤
				order.setFreight(new BigDecimal(30));
			}
			else{
				  if(finalWeight.compareTo(new BigDecimal(500))<=0){
					  order.setFreight(finalWeight.multiply(new BigDecimal("0.4")));//0.4 500公斤以下
				  }
				  if(finalWeight.compareTo(new BigDecimal(700))<=0&&finalWeight.compareTo(new BigDecimal(500))==1){
					  order.setFreight(finalWeight.multiply(new BigDecimal("0.36")));//0.4*0.9 500-700公斤
				  }
				  if(finalWeight.compareTo(new BigDecimal(1000))<=0&&finalWeight.compareTo(new BigDecimal(700))==1){
					  order.setFreight(finalWeight.multiply(new BigDecimal("0.32")));//0.4*0.8 700-900公斤
				  }
				  if(finalWeight.compareTo(new BigDecimal(1000))==1){
					  order.setFreight(finalWeight.multiply(new BigDecimal("0.28")));//0.4*0.7 1000公斤以上
				  }
			}
		}
		// 2016-6-18 新需求 按重量（公斤）区间来算 价格  BY twr  end
		order.setNumber(CacheUtilByCC.getOrderNumber(new String("CL_Order"), new String ("O"), 8));
		order.setStatus(1);
		JSONArray addressDel = JSONArray.fromObject(addressDeliverString);
		JSONArray addressRec = JSONArray.fromObject(addressReceiptString);
		
		
		/**计算运费 Start*/
		order.setFdriverfee(order.getFreight().multiply(CalcTotalField.calDriverFee(order.getFreight())).setScale(1,BigDecimal.ROUND_HALF_UP));
		/**计算运费 End*/
		
		this.orderDao.save(order);
		//============================================整车计算运费=============结束=====================================//
		//===================== 增加订单车辆明细===============================开始=====================================//
		if(order.getType()==1 ){
			String[] carTypeString=carTypeId.split(",");
			if(otherId!=null && !"".equals(otherId) && !otherId.contains("null")){
				String[] carOtherString=otherId.split(",");
				for(int m=0;m<carOtherString.length;m++){
					for(int n=0;n<carTypeString.length;n++){
						CL_OrderCarDetail orderCarDetail1=new CL_OrderCarDetail();
						orderCarDetail1.setOrderId(order.getId());
						orderCarDetail1.setCarSpecId(specId);
						System.out.println(carTypeString[n]);
						System.out.println(Integer.valueOf(carTypeString[n]));
//						if(Integer.valueOf(carTypeString[n])>22){
//							System.out.println("**********************数据有问题************************"+order.getNumber());
//							map.put("success", "false");
//							map.put("msg","车辆类型数据有误！");
//							return writeAjaxResponse(response, JSONUtil.getJson(map)); 
//						}
						orderCarDetail1.setCarTypeId(Integer.valueOf(carTypeString[n]));
						orderCarDetail1.setCarOtherId(Integer.valueOf(carOtherString[m]));
						orderCarDetail1.setCreateTime(new Date());
						orderCarDetailDao.save(orderCarDetail1);
					}
				}
			}else{
				for(int i=0;i<carTypeString.length;i++){
					CL_OrderCarDetail orderCarDetail2=new CL_OrderCarDetail();
					orderCarDetail2.setOrderId(order.getId());
					orderCarDetail2.setCarSpecId(specId);
//					if(Integer.valueOf(carTypeString[i])>22){
//						System.out.println("**********************数据有问题************************"+order.getNumber());
//						map.put("success", "false");
//						map.put("msg","车辆类型数据有误！");
//						return writeAjaxResponse(response, JSONUtil.getJson(map)); 
//					}
					orderCarDetail2.setCarTypeId(Integer.valueOf(carTypeString[i]));
					orderCarDetail2.setCreateTime(new Date());
					orderCarDetailDao.save(orderCarDetail2);
				}
			}
		}
		
		//===================== 增加订单车辆明细===============================结束=====================================//
		this.createDetail(addressDel,order.getId(),1,freceiptSave);
		this.createDetail(addressRec,order.getId(),2,freceiptSave);
		order.setFreight(order.getFreight().setScale(1, BigDecimal.ROUND_HALF_UP));
		JSONArray JOArry=new JSONArray();
		if(addressRec.size()>1){
			String [] title= new String[]{"装卸","电子回单","回单原件","上楼"};
			String [] context=new String []{"线下协商、支付","免费","线下协商、支付","线下协商、支付"};
			for(int i=0;i<title.length;i++){
				JSONObject  JO=new JSONObject();
				JO.put("id", i);
				JO.put("title", title[i]);
				JO.put("context",context[i]);
				JO.put("isc", 0);
				JOArry.add(i,JO);
			}
		}
		else{
			String [] title= new String[]{"装卸","电子回单","回单原件","上楼","代收货款"};
			String [] context=new String []{"线下协商、支付","免费","线下协商、支付","线下协商、支付","免费"};
			for(int i=0;i<title.length;i++){
				JSONObject  JO=new JSONObject();
				JO.put("id", i);
				JO.put("title", title[i]);
				JO.put("context",context[i]);
				JO.put("isc", 0);
				JOArry.add(i,JO);
			}
		}
		order.setServer(JOArry);
		//order.setServer("[{\"id\":\"0\",\"title\":\"装卸\",\"context\":\"线下协商、支付\",\"isc\":\"0\"},{\"id\":\"1\",\"title\":\"电子回单\",\"context\":\"免费\",\"isc\":\"0\"},{\"id\":\"2\",\"title\":\"回单原件\",\"context\":\"免费\",\"isc\":\"0\"},{\"id\":\"3\",\"title\":\"上楼\",\"context\":\"线下协商、支付\",\"isc\":\"0\"},{\"id\":\"4\",\"title\":\"代收货款\",\"context\":\"免费\",\"isc\":\"0\"}]");
		if(addressRec.size()>1){
			order.setPayMethod("0,1,2,3");
		}
		else{
			order.setPayMethod("0,1,2,3,4");
		}
		map.put("success", "true");
		map.put("data",order);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	//创建订单明细发货
	public void createDetail(JSONArray address,Integer orderId,Integer detailType,Integer freceiptSave){
		Integer ranInt=null;
		String ranString=null;
		for (int i = 0; i < address.size(); i++) {
			ranInt=new Random().nextInt(900000)+100000;
			ranString=ranInt.toString();
			JSONObject jdel = address.getJSONObject(i);
			CL_OrderDetail detail =new CL_OrderDetail();
			detail.setOrderId(orderId);
			detail.setDetailType(detailType);
			detail.setLinkman(jdel.get("linkman").toString());
			detail.setPhone(jdel.get("phone").toString());
			detail.setAddressName(jdel.get("addressName").toString());
			detail.setLongitude(jdel.get("longitude").toString());
			detail.setLatitude(jdel.get("latitude").toString());
			detail.setSnumber(i+1);
			detail.setSecurityCode(ranString);
			detail.setFreceiptSave(freceiptSave);
			detail.setPass(0);
			this.orderDetailDao.save(detail);
		}
	}
	
	/***设为常用订单*/
	@RequestMapping("/app/order/setCommon")
	public String setCommon(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer orderId,isCommon;
		HashMap<String, Object> map = new HashMap<String, Object>();
		if(request.getParameter("orderId")==null || "".equals(request.getParameter("orderId"))){
			map.put("success", "false");
			map.put("msg","数据有误请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			orderId = Integer.parseInt(request.getParameter("orderId"));
		}
		if(request.getParameter("isCommon")==null || "".equals(request.getParameter("isCommon"))){
			map.put("success", "false");
			map.put("msg","设为常用订单失败请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			isCommon = Integer.parseInt(request.getParameter("isCommon"));
		}
		this.orderDao.updateByUserId(orderId, isCommon);
		HashMap<String, Object> m = new HashMap<String, Object>();
		m.put("success", "true");
		m.put("msg","设置成功！" );
		return writeAjaxResponse(response, JSONUtil.getJson(m));
	}
	
	/**根据订单状态筛选订单*/
	@RequestMapping("/app/order/filtrateOrder")
	public String filtrateOrder(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer status,pageNum ,pageSize,type;
		HashMap<String, Object> map = new HashMap<String, Object>();
		if(request.getParameter("status")==null || "".equals(request.getParameter("status"))){
			map.put("success", "false");
			map.put("msg","数据有误请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			status = Integer.parseInt(request.getParameter("status"));
		}
		if(request.getParameter("pageNum")==null || "".equals(request.getParameter("pageNum"))){
			map.put("success", "false");
			map.put("msg","无法获知第几页");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			pageNum = Integer.parseInt(request.getParameter("pageNum"));
		}
		if(request.getParameter("type")==null || "".equals(request.getParameter("type"))){
			map.put("success", "false");
			map.put("msg","数据有误请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			type = Integer.parseInt(request.getParameter("type"));
		}
		if(request.getParameter("pageSize")==null || "".equals(request.getParameter("pageSize"))){
			map.put("success", "false");
			map.put("msg","无法获知每页显示多少条");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if(orderQuery==null){
			orderQuery = newQuery(OrderQuery.class, null);
		}
		if (pageNum != null) {
			orderQuery.setPageNumber(pageNum);
		}
		if (pageSize != null) {
			orderQuery.setPageSize(pageSize);
		}
		if(status!=null){
			orderQuery.setStatus(status);
		}
		if(type!=null){
			orderQuery.setType(type);
		}
		Page<CL_Order> page=orderDao.findPage(orderQuery);
		HashMap<String, Object> m = new HashMap<String, Object>();
		m.put("success", "true");
		m.put("total", page.getTotalCount());
		m.put("data", page.getResult());
		return writeAjaxResponse(response, JSONUtil.getJson(m));
	}

	/**APP删除订单*/
	@RequestMapping("/app/order/delorder")
	public String delorder(HttpServletRequest request,HttpServletResponse response) throws IOException{
	          Integer orderId,userType;
	       	  HashMap<String, Object> map = new HashMap<String, Object>();
	          if(request.getParameter("orderId")==null||"".equals(request.getParameter("orderId"))){
	        	 map.put("success", "false");
	  			 map.put("msg","数据有误请联系客服");
	  			return writeAjaxResponse(response, JSONUtil.getJson(map));
	          }else{
	        	   orderId=Integer.parseInt(request.getParameter("orderId"));
	          }
	          if(request.getParameter("userType")==null||"".equals(request.getParameter("userType"))){
	        	 map.put("success", "false");
	  			 map.put("msg","数据有误请联系客服");
	  			return writeAjaxResponse(response, JSONUtil.getJson(map));
	          }else{
	        	  userType=Integer.parseInt(request.getParameter("userType"));
	          }
	        CL_Order order =this.orderDao.getById(orderId);
	        if(order.getFdelOrder()!=0){
	        		 order.setFdelOrder(3);
	        	     this.orderDao.update(order);
	        }
	        if(order.getFdelOrder()==0){
	             switch (userType) {
				   case 1:
					   order.setFdelOrder(1);
		        	   this.orderDao.update(order);
					break;
				   case 2:
					   order.setFdelOrder(2);
		        	   this.orderDao.update(order);
					break;
	      }
	     }
		map.put("success", "true");
		map.put("msg", "修改成功");
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	
 }
	/**车主抢单
	 * */
	@RequestMapping("/app/driver/ownerGrab")
	public synchronized String ownerGrab(HttpServletRequest request,HttpServletResponse response) throws Exception{
		Integer userId,orderId;
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userId = Integer.valueOf(request.getParameter("userId"));
		}
		if(request.getParameter("orderId")==null||"".equals(request.getParameter("orderId"))){
			map.put("success", "false");
			map.put("msg","数据有误请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		else{
			orderId=Integer.parseInt(request.getParameter("orderId"));
		}
		//判断订单是否为未抢状态
		CL_Order orderInfo =orderDao.IsExistIdByStatus(orderId);
		if(orderInfo!=null && !orderInfo.equals("")){
			orderDao.updateByOrderId(userId,userId, orderId,3);//运输中
			//====抢单成功后向货主发送验证码==//
			List<CL_OrderDetail> detailList=new ArrayList<>();
			if(orderInfo.getType()==3){
				detailList=orderDetailDao.getByOrderId(orderId, 1);
			}else{
				 detailList=orderDetailDao.getByOrderId(orderId, 2);
			}
			CL_UserRole userRole=userRoleDao.getById(userId);
			CL_UserRole userRole1=userRoleDao.getById(orderDao.getById(orderId).getCreator());
			List<CL_Car> cars=cardao.getByUserRoleId(userId);
			DongjingClient djcn=ServerContext.createVmiClient();
			String msgString1="您的订单已被抢,为您服务的 %s,电话:"+userRole.getVmiUserPhone()+",车牌号:%s,客服:0577-85391111,更多优惠下载手机APP,http://fir.im/d1q4";
			String msgString="您的货物在运输途中,为您服务的 %s,电话:"+userRole.getVmiUserPhone()+",车牌号:"+cars.get(0).getCarNum()+",客服:0577-85391111,更多优惠下载手机APP,http://fir.im/d1q4";
			djcn.setMethod("getDeatilCode");
			djcn.setRequestProperty("ftel",userRole1.getVmiUserPhone());
			djcn.setRequestProperty("fname",cars.get(0).getDriverName());
			djcn.setRequestProperty("fcode",cars.get(0).getCarNum() );
			djcn.setRequestProperty("msgString",msgString1);
			djcn.SubmitData();
			for(CL_OrderDetail detail:detailList ){
				djcn.setMethod("getDeatilCode");
				djcn.setRequestProperty("ftel",detail.getPhone());
				djcn.setRequestProperty("fname",cars.get(0).getDriverName());
				djcn.setRequestProperty("fcode",detail.getSecurityCode());
				djcn.setRequestProperty("msgString",msgString);
				djcn.SubmitData();
			}
			map.put("success", "true");
			map.put("msg", "抢单成功！");
		}else{
			map.put("success", "false");
			map.put("msg", "该单已经被抢！");
		}
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/**循环单列表
	 * @throws ParseException */
	@RequestMapping("/app/order/cycleorder")
	public String cycleorder(HttpServletRequest request,HttpServletResponse response) throws IOException, ParseException{
		int userId=0,type=0,pageNum=0,pageSize=0,isCommon=0,status=0;
		HashMap<String,Object> map =new HashMap<String,Object>();
//		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
//			map.put("success", "false");
//			map.put("msg","未登录！");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}else{
//			userId = Integer.parseInt(request.getParameter("userId"));
//		}
	    userId=getRequestParameter(request, response, map, "未登录！", "userId", userId); 
	    status=getRequestParameter(request, response, map, "无法获知订单状态", "status", status); 
	    pageSize=getRequestParameter(request, response, map,"无法获知每页显示多少条", "pagesize", pageSize); 
	    pageNum=getRequestParameter(request, response, map, "无法获知第几页", "pagenum", pageNum); 
//		if(request.getParameter("status")==null || "".equals(request.getParameter("status"))){
//			map.put("success", "false");
//			map.put("msg","无法获知订单状态");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}else{
//			status = Integer.parseInt(request.getParameter("status"));
//		}
//		if(request.getParameter("pagenum")==null || "".equals(request.getParameter("pagenum"))){
//			map.put("success", "false");
//			map.put("msg","无法获知第几页");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}else{
//			pageNum = Integer.valueOf(request.getParameter("pagenum"));
//		}
//		if(request.getParameter("pagesize")==null || "".equals(request.getParameter("pagesize"))){
//			map.put("success", "false");
//			map.put("msg","无法获知每页显示多少条");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}else{
//			pageSize = Integer.valueOf(request.getParameter("pagesize"));
//		}
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	   
		orderQuery = newQuery(OrderQuery.class, null);
		orderQuery.setCreator(userId);
		if(request.getParameter("type")!=null && !"".equals(request.getParameter("type"))){
			orderQuery.setType(Integer.parseInt(request.getParameter("type")));
		}
		if(request.getParameter("isCommon")!=null && !"".equals(request.getParameter("isCommon"))){
			orderQuery.setIsCommon(Integer.parseInt(request.getParameter("isCommon")));
		}
		if(request.getParameter("loadedTimeBegin")!=null && !"".equals(request.getParameter("loadedTimeBegin"))){
			orderQuery.setLoadedTimeBegin(sdf.parse(request.getParameter("loadedTimeBegin")));
		}
		if(request.getParameter("loadedTimeEnd")!=null && !"".equals(request.getParameter("loadedTimeEnd"))){
			orderQuery.setLoadedTimeEnd(sdf.parse(request.getParameter("loadedTimeBegin")));
		}
		orderQuery.setPageNumber(pageNum);
		orderQuery.setPageSize(pageSize);
		orderQuery.setStatus(null);
		orderQuery.setHuoLoadOrder(status);
		Page<CL_Order> page = orderDao.findPage(orderQuery);
		List<CL_Order> list =page.getResult();
		for(CL_Order order:list){
			CL_Protocol pro=new CL_Protocol();
			if(order.getProtocolId()!=null&&order.getProtocolId()!=0){
				 pro=protocolDao.getById(order.getProtocolId());
				 if(pro!=null){
					 order.setProtocol(pro);
				 }
			}
			CL_OrderDetail detailOne = this.orderDetailDao.getByOrderIdForDeliverAddress(order.getId());
			if(detailOne==null){
				map.put("success", "false");
				map.put("msg","订单编号为: "+order.getNumber()+"   数据遗失请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
			order.setTakephone(detailOne.getPhone());
			order.setTakelinkman(detailOne.getLinkman());
			order.setTakeAddress(detailOne.getAddressName());
			if(order.getType()!=3 ){
				CL_OrderDetail detailTwo = this.orderDetailDao.getByOrderIdForConsigneeAddress(order.getId());
				if(detailTwo==null){
					map.put("success", "false");
					map.put("msg","订单编号为: "+order.getNumber()+"  数据遗失请联系客服");
					return writeAjaxResponse(response, JSONUtil.getJson(map));
				}
				order.setRecphone(detailTwo.getPhone());
				order.setReclinkman(detailTwo.getLinkman());
				order.setRecAddress(detailTwo.getAddressName());
			}
			List<Util_Option>  ups=optionDao.getCarTypeByOrderIdName(order.getId());
			String carSpecName="",carOtherName="";
			Integer carSpecId=null;
			if(ups.size()>0){
				carSpecId=ups.get(0).getOptionId();
				carSpecName=ups.get(0).getOptionName();
				carOtherName =ups.get(0).getOptionCarOtherName();
			}
			for(Util_Option option :ups){
				if(option.getOptionCarTypeName()!=null && !option.getOptionCarTypeName().equals("")){
 					if(!carSpecName.contains(option.getOptionCarTypeName())){
	 					carSpecName = carSpecName+" "+option.getOptionCarTypeName();
	 				}
 				}
				
				if(carOtherName!=null && "".equals(carOtherName)&&!carOtherName.contains(option.getOptionCarOtherName())&&!"".equals(option.getOptionCarOtherName())&&option.getOptionCarOtherName()!=null){
					carOtherName=carOtherName+" "+option.getOptionCarOtherName();
				}
			}
			if(carOtherName==null ||"".equals(carOtherName)){
				carSpecName=carSpecName+" "+order.getGoodsTypeName();
			}
			else if(carOtherName!=null&&!"".equals(carOtherName)){
				carSpecName=carSpecName+" "+carOtherName+" "+order.getGoodsTypeName();
			}
			order.setCarTypeName(carSpecName);
			order.setCarSpecId(carSpecId);
			//	 		List<Util_Option> gbbspec = this.optionDao.getCarSpecByOrderId(order.getId());
			//	 		if(carspec.size()>0){
			//	 			String carSpec =null;
			//	 			carSpec = carspec.get(0).getOptionName()+" ";
			//	 			List<Util_Option> cartype = this.optionDao.getCarTypeByOrderId(order.getId());
			//	 			String carType="";
			//	 			for(Util_Option option :cartype){
			//	 				carType = carType+","+option.getOptionName();
			//	 			}
			//	 			order.setCarTypeName(carSpec+" "+carType);
			//	 		}
			
		}
		map.put("success", "true");
		map.put("total", page.getTotalCount());
		map.put("data", page.getResult());
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/**车辆位置*/
	@RequestMapping("/app/order/carposition")
	public String carposition(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer userId,status,pageNum ,pageSize;
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userId = Integer.parseInt(request.getParameter("userId"));
		}
		if(request.getParameter("status")==null || "".equals(request.getParameter("status"))){
			map.put("success", "false");
			map.put("msg","无法获知追踪状态！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			status = Integer.parseInt(request.getParameter("status"));
		}
		if(request.getParameter("pagenum")==null || "".equals(request.getParameter("pagenum"))){
			map.put("success", "false");
			map.put("msg","无法获知第几页");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			pageNum = Integer.valueOf(request.getParameter("pagenum"));
		}
		if(request.getParameter("pagesize")==null || "".equals(request.getParameter("pagesize"))){
			map.put("success", "false");
			map.put("msg","无法获知每页显示多少条");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			pageSize = Integer.valueOf(request.getParameter("pagesize"));
		}
		orderQuery = newQuery(OrderQuery.class, null);
		orderQuery.setCreator(userId);
		orderQuery.setStatus(status);
		orderQuery.setPageNumber(pageNum);
		orderQuery.setPageSize(pageSize);
		Page<CL_Order> page = orderDao.findPage(orderQuery);
		List<CL_Order> list =page.getResult();
		for(CL_Order order:list){
			CL_OrderDetail detailOne = this.orderDetailDao.getByOrderIdForDeliverAddress(order.getId());
			if(detailOne==null){
				map.put("success", "false");
				map.put("msg","订单编号为: "+order.getNumber()+"   数据遗失请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
			order.setTakephone(detailOne.getPhone());
			order.setTakelinkman(detailOne.getLinkman());
			order.setTakeAddress(detailOne.getAddressName());
			CL_OrderDetail detailTwo = this.orderDetailDao.getByOrderIdForConsigneeAddress(order.getId());
			if(detailTwo==null){
				map.put("success", "false");
				map.put("msg","订单编号为: "+order.getNumber()+"  数据遗失请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
			order.setRecphone(detailTwo.getPhone());
			order.setReclinkman(detailTwo.getLinkman());
			order.setRecAddress(detailTwo.getAddressName());
			if(order.getUserRoleId()!=null){
				order.setOrderDriverName(cardao.getCarTypeByUserRoleId(order.getUserRoleId()).getDriverName());
			}
		}
		map.put("success", "true");
		map.put("total", page.getTotalCount());
		map.put("data", list);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/**取消订单*/
	@RequestMapping("/app/order/cancelorder")
	public String cancelorder(HttpServletRequest request,HttpServletResponse response) throws IOException{
		HashMap<String,Object> map =new HashMap<String,Object>();
		Integer userId,orderId;
		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userId = Integer.valueOf(request.getParameter("userId"));
		}
		if(request.getParameter("orderId")==null||"".equals(request.getParameter("orderId"))){
			map.put("success", "false");
			map.put("msg","数据有误请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		else{
			orderId=Integer.parseInt(request.getParameter("orderId"));
		}
		CL_Order order = this.orderDao.getById(orderId);
		//将发送退款请求放到服务端，确保支付退款与业务系统状态一致  BY CC 2016-03-04 START
		if(order.getStatus()!=1 )
		{
			map.put("success", "false");
			map.put("msg","该订单不能取消");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		//将发送退款请求放到服务端，确保支付退款与业务系统状态一致  BY CC 2016-03-04 END	
		
		//APP手动取消前，先进行订单支付校验，解决订单支付成功后由于异常导致订单未支付状态更改且没有充值记录问题
		ServerContext.UserOrderPayOverAll(order.getNumber());
		
		order.setStatus(6);
		order.setOperator(userId);
		this.orderDao.update(order);
		map.put("success", "true");
		map.put("msg", "操作成功！");
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/** 再次下单接口*/
	@RequestMapping("/app/order/againorder")
	public String againorder(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer userId,orderId;
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userId = Integer.parseInt(request.getParameter("userId"));
		}
		if(request.getParameter("orderId")==null||"".equals(request.getParameter("orderId"))){
			map.put("success", "false");
			map.put("msg","数据有误请联系客服");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		else{
			orderId=Integer.parseInt(request.getParameter("orderId"));
		}
		CL_Order order = this.orderDao.getById(orderId);
		order.setTakeList(this.orderDetailDao.getByOrderId(orderId, 1));
		order.setRecList(this.orderDetailDao.getByOrderId(orderId, 2));
		order.setCarList(this.orderCarDetailDao.getByOrderId(orderId));
		map.put("success", "true");
		map.put("data", order);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}
	
	/**车主抢单列表
	 * @throws ParseException */
	@RequestMapping("/app/driver/grabOrderLoad")
	public String grabOrderLoad(HttpServletRequest request,HttpServletResponse response) throws IOException, ParseException{
		Integer userId,pageNum ,pageSize;
		int effectiveDistance =10;
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userId = Integer.valueOf(request.getParameter("userId"));
		}
		if(request.getParameter("pagenum")==null || "".equals(request.getParameter("pagenum"))){
			map.put("success", "false");
			map.put("msg","无法获知第几页");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			pageNum = Integer.valueOf(request.getParameter("pagenum"));
		}
		if(request.getParameter("pagesize")==null || "".equals(request.getParameter("pagesize"))){
			map.put("success", "false");
			map.put("msg","无法获知每页显示多少条");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			pageSize = Integer.valueOf(request.getParameter("pagesize"));
		}
		List<CL_Car> carlist = this.cardao.getByUserRoleId(userId);
		if(carlist.size()<=0){
			map.put("success", "false");
			map.put("msg","请先认证车辆信息!");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		orderQuery = newQuery(OrderQuery.class, null);
		if (pageNum != null) {
			orderQuery.setPageNumber(pageNum);
		}
		if (pageSize != null) {
			orderQuery.setPageSize(pageSize);
		}
		orderQuery.setStatus(2);
		orderQuery.setFdelOrder(0);
		Page<CL_Order> page = orderDao.findPage(orderQuery);
		List<CL_Order> list =page.getResult();
		
		int total =page.getTotalCount();
		System.out.println("共"+page.getTotalCount()+"条订单");
		/***BY CC 2016-03-05
		 * 1、list要从大到小移除，否则有可能出现移除时越界和数据错位错误,
		 *2、需要剔除要车时间小于当前时间的订单
		 */
		/***
		 *  通过BigDecimal的compareTo方法来进行比较.
		 *	返回的结果是int类型,-1表示小于,0是等于,1是大于.
		 */
		for(int i=list.size()-1;i>=0;i--){
			//临时零担不参与抢单 
			if(list.get(i).getType()==2){
				list.remove(i);
				total = total-1;
				continue;
			}
			Date d1=df.parse(df.format(new Date()));
			if(list.get(i).getLoadedTime().compareTo(new Date())==-1 || list.get(i).getLoadedTime().compareTo(new Date())==0){
				System.out.println("派车大于当前事件移除");
				list.remove(i);
				total = total-1;
				continue;
			}
		
			//先判断时间、好运司机判断，可以减少很多数据库取数    BY  CC 2016-05-21  START
			if(carlist.get(0).getFluckDriver()==null||carlist.get(0).getFluckDriver()==0){
				if(list.get(i).getProtocolType()==1){
					list.remove(i);
					total=total-1;
					continue;
				}
				long time= d1.getTime()-list.get(i).getFpayTime().getTime();				 
				long ss=time/1000;
				long systime=10;
				///三分钟 抢单时间  by   twr
				if(!(Math.abs(ss-systime)<=180&&Math.abs(ss-systime)>=10)){
					list.remove(i);
					total=total-1;
					continue;
				}
			}
			//好运司机抢单列表
			if(carlist.get(0).getFluckDriver()==1){
				if(list.get(i).getProtocolType()==1){
					list.remove(i);
					total=total-1;
					continue;
				}
				long time= d1.getTime()-list.get(i).getFpayTime().getTime();				 
				long ss=time/1000;
				if(!(Math.abs(ss)<=180&&Math.abs(ss)>=0)){
					list.remove(i);
					total=total-1;
					continue;
				}				 
			}
			//先判断时间、好运司机判断，可以减少很多数据库取数    BY  CC 2016-05-21  END
			//通过订单流水号ID,查询订单对应的所需车型(去掉重复)
			List<Util_Option> option  = this.optionDao.getCarTypeByOrderId(list.get(i).getId());
			if(option.size()>0){
				if(option.size()==1){
					if(!("任意车型").equals(option.get(0).getOptionName())){
						if(!option.get(0).getOptionId().equals(carlist.get(0).getCarType())){
							System.out.println("单选车型：订单所需车型和司机对应的车型不匹配");
							list.remove(i);
							total = total-1;
							continue;
						}
					}else if(("任意车型").equals(option.get(0).getOptionName()) && !option.get(0).getId().equals(carlist.get(0).getCarSpecId())){
						list.remove(i);
						total = total-1;
						continue;
					}	
				}else{
					List<Integer> carIds = new ArrayList<Integer>();
					for(int m= 0 ;m<option.size();m++){
						carIds.add(option.get(m).getOptionId());
					}
					if(!carIds.contains(carlist.get(0).getCarType())){
						System.out.println("多选车型：订单所需车型和司机对应的车型不匹配");
						list.remove(i);
						total = total-1;
						continue;
					}
				}
			}
			CL_OrderDetail detail = this.orderDetailDao.getByOrderIdForDeliverAddress(list.get(i).getId());
			//司机经纬度需要替换  记得！！
			String[] st = null;
			String Longitude="";
			String Latitude="";
			st = ServerContext.getDriverPosition().get(Integer.toString(userId));
			if(st != null && st.length>0){
				  Longitude = st[0];
				  Latitude = st[1];
    		}
			else{
				list.remove(i);
				total = total-1;
				continue;
			}
			BigDecimal straightStretch = LatitudeLongitudeDI.GetDistance(Double.parseDouble(detail.getLatitude()), Double.parseDouble(detail.getLongitude()), Double.parseDouble(Latitude), Double.parseDouble(Longitude));
			if((new BigDecimal(effectiveDistance)).compareTo(straightStretch)==-1){
				System.out.println("==========相距超出10公里===========移除订单："+list.get(i).getNumber());
				list.remove(i);
				total = total-1;
				continue;
			}
			//先判断时间、好运司机判断，可以减少很多数据库取数    BY  CC 2016-05-21  START  先注释了
			//这里要过滤 时间 和好运司机 还有协议订单
//			if(carlist.get(0).getFluckDriver()==null||carlist.get(0).getFluckDriver()==0){
//				if(list.get(i).getProtocolType()==1){
//					list.remove(i);
//					total=total-1;
//					continue;
//				}
//				long time= d1.getTime()-list.get(i).getFpayTime().getTime();				 
//				long ss=time/1000;
//				long systime=10;
//				if(!(Math.abs(ss-systime)<=60&&Math.abs(ss-systime)>=10)){
//					list.remove(i);
//					total=total-1;
//					continue;
//				}
//			}
//			//好运司机抢单列表
//			if(carlist.get(0).getFluckDriver()==1){
//				if(list.get(i).getProtocolType()==1){
//					list.remove(i);
//					total=total-1;
//					continue;
//				}
//				long time= d1.getTime()-list.get(i).getFpayTime().getTime();				 
//				long ss=time/1000;
//				if(!(Math.abs(ss)<=60&&Math.abs(ss)>=0)){
//					list.remove(i);
//					total=total-1;
//					continue;
//				}				 
//			}
			//先判断时间、好运司机判断，可以减少很多数据库取数    BY  CC 2016-05-21  END
		}
		
		
		for(int i=0;i<list.size();i++){
			CL_OrderDetail detail2 = this.orderDetailDao.getByOrderIdForDeliverAddress(list.get(i).getId());
			CL_OrderDetail detailTwo=this.orderDetailDao.getByOrderIdForConsigneeAddress(list.get(i).getId());
			list.get(i).setTakeAddress(detail2.getAddressName());
			 if(detailTwo!=null){
			list.get(i).setRecAddress(detailTwo.getAddressName());
			 }
			List<Util_Option> carspec = this.optionDao.getCarSpecByOrderId(list.get(i).getId());
			if(carspec.size()>0){
				String carSpec =null;
				carSpec = carspec.get(0).getOptionName()+" ";
				List<Util_Option> cartype = this.optionDao.getCarTypeByOrderId(list.get(i).getId());
				if(list.get(i).getType()==1){
					String carType="";
					for(Util_Option option :cartype){
						carType = carType+","+option.getOptionName();
					}
					list.get(i).setCarTypeName(carSpec+" "+carType);
				}
			}
		}
		//支持价格区间管理费用功能 ,在订单和追加费用表中增加司机运费字段，直接取数返回给前端   BY CC 2016-05-18 START
		for (int m = 0; m < list.size(); m++) {
			List<CL_Addto> adds = iaddtoDao.getByOrderId(list.get(m).getId());
			BigDecimal AllCost = new BigDecimal(0);
			if (adds.size() > 0) {
				for (CL_Addto ad : adds) {
					AllCost = AllCost.add(ad.getFdriverfee());
				}
			}
			list.get(m).setAllCost(
					AllCost.setScale(1, BigDecimal.ROUND_HALF_UP));
			list.get(m).setFreight(
					list.get(m).getFdriverfee()
							.setScale(1, BigDecimal.ROUND_HALF_UP));
		}
		//支持价格区间管理费用功能 ,在订单和追加费用表中增加司机运费字段，直接取数返回给前端   BY CC 2016-05-18 END
		
		
		
//		CL_Rule rule = this.ruleDao.getOneByType();
//		if(rule ==null){
//			map.put("success", "false");
//			map.put("msg","司机计费规则丢失,请联系客服！");
//			return writeAjaxResponse(response, JSONUtil.getJson(map));
//		}else{
//			for(int m =0;m<list.size();m++){
//				  List<CL_Addto> adds=iaddtoDao.getByOrderId(list.get(m).getId());
//				  BigDecimal AllCost=new BigDecimal(0);
//				    if(adds.size()>0){
//				    	for(CL_Addto ad:adds){
//				    		AllCost=AllCost.add(ad.getFcost());
//				    	}
//				    }
//			   list.get(m).setAllCost(AllCost.multiply(rule.getStartPrice()).setScale(0,BigDecimal.ROUND_HALF_UP));    
//			   list.get(m).setFreight(list.get(m).getFreight().multiply(rule.getStartPrice()).setScale(0, BigDecimal.ROUND_HALF_UP));
//			}
//		}
		map.put("success", "true");
		map.put("total", total);
		map.put("data", list);
		System.out.println("----------------------------------------");
		System.out.println(JSONUtil.getJson(map));
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/**货主订单跟踪*/
	@RequestMapping("/app/shipper/getCarposition")
	public String getCarposition(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Integer userId;
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else{
			userId = Integer.valueOf(request.getParameter("userId"));
		}
		String[] st = null;
		st = ServerContext.getDriverPosition().get(Integer.toString(userId));
		if(st != null && st.length>0){
			String Longitude = st[0];
			String Latitude = st[1];
			map.put("success", "true");
			map.put("data", "[{\"Longitude\":\""+Longitude+"\",\"Latitude\":\""+Latitude+"\"}]");
		}else{
			map.put("success", "false");
		}
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/*** 用户反馈 新建-保存*/
	@RequestMapping("/app/feedback/feedbackSave")
	public String feedbackSave(HttpServletRequest request,HttpServletResponse response,@ModelAttribute CL_Feedback feedback) throws Exception{
		HashMap<String, Object> map = new HashMap<String, Object>();
		if(request.getParameter("content")==null || "".equals(request.getParameter("content"))){
			map.put("success", "false");
			map.put("msg","请先录入反馈信息！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		feedback.setCreateTime(new Date());
		feedback.setCreatorId(Integer.parseInt(request.getParameter("userId").toString()));
		feedback.setContent(request.getParameter("content"));
		feedback.setFphone(request.getParameter("fphone"));
		this.userRoleDao.saveFeedback(feedback);
		map.put("success", "true");
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/*** 获取用户已成单次数、被评价次数*/
	@RequestMapping("/app/order/getEndOrderCount")
	public String getEndOrderCount(HttpServletRequest request,HttpServletResponse response,@ModelAttribute CL_Feedback feedback) throws Exception{
		Integer userId;
		HashMap<String,Object> map =new HashMap<String,Object>();
		try{
			if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
				map.put("success", "false");
				map.put("msg","未登录！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				userId = Integer.valueOf(request.getParameter("userId"));
			}
			CL_UserRole userRole=userRoleDao.getById(userId);
			map.put("success", "true");
			map.put("data", "[{\"endOrderTimes\":\""+userRole.getEndOrderTimes()+"\",\"rateTimes\":\""+userRole.getRateTimes()+"\"}]");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}catch(Exception e){
			map.put("success", "false");
			map.put("msg","未登录！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
	}

	@RequestMapping("/app/order/TimeChangeByCar")
	public String TimeChangeByCar(HttpServletRequest request,HttpServletResponse response,@ModelAttribute CL_Feedback feedback) throws Exception{
		Integer orderId,type;
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("type")==null || "".equals(request.getParameter("type"))){
			map.put("success", "false");
			map.put("msg","类型有误！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		else{
			type=Integer.valueOf(request.getParameter("type").toString());
		}
		if(request.getParameter("orderId")==null || "".equals(request.getParameter("orderId"))){
			map.put("success", "false");
			map.put("msg","订单有误！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}
		else{
			orderId=Integer.valueOf(request.getParameter("orderId").toString());
		}
		if(type==1){
			orderDao.updateByArriveTime(orderId, new Date());
		}
		if(type==2){
			orderDao.updateByLeaveTime(orderId, new Date());
		}
		map.put("success", "true");
		map.put("msg","操作成功");
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}
	
	/** 锁定金额查询(一星期) */
	@RequestMapping("/app/order/lockedAmount") 
	public String LockedAmount(HttpServletRequest request,HttpServletResponse response) throws Exception{
		Integer urid=0;
		HashMap<String,Object> map =new HashMap<String,Object>();
		if(request.getParameter("urid")==null||"".equals(request.getParameter("urid")))
		{
			map.put("success", "false");
			map.put("msg","用户ID为空！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		}else
		{
			urid=Integer.parseInt(request.getParameter("urid"));
		}
		//根据司机ID查询订单表中所有的金额，条件大于当前日期减7
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		Calendar c = Calendar.getInstance();  
        c.add(Calendar.DATE, - 7);  
//        Date fcopTime = c.getTime();
        Date fcopTime = sdf.parse((sdf.format(c.getTime())));
        String lockedMoney =orderDao.getLockedAmount(urid, fcopTime);
		map.put("success", "true");
		map.put("data", lockedMoney);
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}
	
	
	@RequestMapping("/app/order/receiptSave")
	@Transactional(propagation=Propagation.REQUIRED)
    public String receiptSave(HttpServletRequest request,HttpServletResponse response) throws IOException{
		 System.out.println("ssssssssssssssssssssssssssssssssssss");
		 request.setCharacterEncoding("UTF-8");
		 Integer userId,ftakeproblem,frecproblem,fcarproblem,orderId,type,orderDetailId;
		 HashMap<String,Object> map =new HashMap<String,Object>();
		 if(request.getParameter("userId")==null || "".equals(request.getParameter("userId"))){
		     map.put("success", "false");
			 map.put("msg","未登录！");
			 return writeAjaxResponse(response, JSONUtil.getJson(map));
		 }else{
		    userId=Integer.valueOf(request.getParameter("userId").toString());
		 }
		 if(request.getParameter("orderId")==null || "".equals(request.getParameter("orderId"))){
		     map.put("success", "false");
			 map.put("msg","订单数据有误,请联系客服！");
			 return writeAjaxResponse(response, JSONUtil.getJson(map));
		 }else{
			 orderId=Integer.valueOf(request.getParameter("orderId").toString());
		 }
		 if(request.getParameter("orderDetailId")==null || "".equals(request.getParameter("orderDetailId"))){
				map.put("success", "false");
				map.put("msg","订单数据ID有误,请联系客服");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}else{
				orderDetailId = Integer.parseInt(request.getParameter("orderDetailId"));
			}
		 List<Cl_Upload> cupde=iuploadDao.getByOrderIdAndByMode(orderDetailId, "cl_receiptSave");
		  if(cupde.size()>0){
				iuploadDao.deleteByMode(cupde.get(0).getId(), cupde.get(0).getModelName());
			}
		  	request.setCharacterEncoding("UTF-8");
			ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory()); // 创建一个新的文件上传对象
			upload.setHeaderEncoding("utf-8");//避免中文名乱码
			SimpleDateFormat dfs = new SimpleDateFormat("yyyy-MM-dd");//设置日期格式
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM");//设置日期格式
			try {	
			MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
			// 表单中对应的文件名；
				Map<String, MultipartFile> fileMap = multipartRequest.getFileMap();
				List<FileItem> list  = upload.parseRequest(request);
				File file = new File(request.getServletContext().getRealPath("\\"));//获取当前路径
				String fpath = 	file.getParent()+"/csclreceiptfile/"+df.format(new Date())+"/"+dfs.format(new Date());//构造按当前日期保存文件的路径 yyyy-MM-dd
				String fname = file.getName();//文件名
				file = new File(fpath);
				if(!file.exists()){
					file.mkdirs();
				}
				for (Map.Entry<String, MultipartFile> item : fileMap.entrySet()) {
					MultipartFile multifile = item.getValue();
					SimpleDateFormat sf = new SimpleDateFormat("yyMMddHHmmssSSS");
					fname = sf.format(new Date())+"-"+multifile.getOriginalFilename();
					try {
						//新增附件信息
						Cl_Upload up = new Cl_Upload();
						int m =fpath.indexOf("csclreceiptfile");
						String newPath = fpath.substring(m,fpath.length());
							up.setName(fname);
							up.setUrl(newPath+"/"+fname);
							up.setParentId(orderDetailId);
							//up.setParentId
							up.setRemark("回单上传,订单明细Id");
							up.setCreateTime(new Date());
							up.setModelName("cl_receiptSave");
							up.setCreateId(userId);
						this.iuploadDao.save(up);
						this.orderDetailDao.updateFrea(orderDetailId,2);
						file = new File(fpath,fname);
						DataOutputStream out=new DataOutputStream(new FileOutputStream(fpath+"/"+fname));
						InputStream is=null;
						try {
							is = multifile.getInputStream();
							byte[] b = new byte[is.available()];
							is.read(b);
							out.write(b);
						} catch (Exception e) {
							// TODO: handle exception
						} finally {
							if (is != null) {
								is.close();
							}
							if (out != null) {
								out.close();
							}
						}
					} catch (Exception e) {
						throw new RuntimeException(e);
					}
				}
			} catch (FileUploadException e) {
				throw new RuntimeException(e);
			}
			map.put("success", "true");
			map.put("msg","操作成功!");
			System.out.println("************上传打印******************");
			System.out.println(JSONUtil.getJson(map));
			System.out.println("************上传打印******************");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
   }
	/** 查询司机排名前三*/
	@RequestMapping("/app/order/carRankingLoad") 
	public String carRankingLoad(HttpServletRequest request,HttpServletResponse response) throws Exception{
		  HashMap<String,Object> map=new HashMap<String,Object>();
			List<CL_CarRanking> rankingList=icarRankingDao.getAll();
			if(rankingList.size()>0){
				for(CL_CarRanking ras:rankingList){
					ras.setFname(ras.getFname().substring(0,1)+"师傅");
					ras.setFnumber(ras.getFnumber().substring(0,ras.getFnumber().length()-2)+"**");
					ras.setType(999);//用于抢单列表特殊 显示 
				}
			}
			map.put("success", "true");
			map.put("data", rankingList);
			System.out.println("-----------------返回排名----------------------");
			System.out.println(JSONUtil.getJson(map));
			return writeAjaxResponse(response, JSONUtil.getJson(map));
	 }
}
