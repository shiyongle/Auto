package com.pc.appInterface.coupons;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;

import cn.org.rapid_framework.page.Page;

import com.pc.controller.BaseController;
import com.pc.dao.coupons.ICouponsDao;
import com.pc.dao.couponsDetail.ICouponsDetailDao;
import com.pc.dao.message.ImessageDao;
import com.pc.dao.order.impl.OrderDao;
import com.pc.model.CL_Bank_Info;
import com.pc.model.CL_Coupons;
import com.pc.model.CL_CouponsDetail;
import com.pc.model.CL_Message;
import com.pc.model.CL_Order;
import com.pc.query.coupons.CL_CouponsQuery;
import com.pc.query.couponsDetail.CL_CouponsDetailQuery;
//import com.pc.util.CsclPushUtil;
import com.pc.util.JSONUtil;
import com.pc.util.ServerContext;
import com.pc.util.String_Custom;

@Controller
public class AppCouponsController extends BaseController {
	@Resource
	private ICouponsDao couponsDao;
	@Resource
	private ImessageDao messageDao;
	@Resource
	private ICouponsDetailDao couponsDetailDao;
	@Resource
	private OrderDao orderDao;

	private CL_CouponsQuery couponsQuery;
	private CL_CouponsDetailQuery couponsDetailQuery;

	public CL_CouponsDetailQuery getCouponsDetailQuery() {
		return couponsDetailQuery;
	}

	public void setCouponsDetailQuery(CL_CouponsDetailQuery couponsDetailQuery) {
		this.couponsDetailQuery = couponsDetailQuery;
	}

	public CL_CouponsQuery getCouponsQuery() {
		return couponsQuery;
	}

	public void setCouponsQuery(CL_CouponsQuery couponsQuery) {
		this.couponsQuery = couponsQuery;
	}

	/*** 扫一扫二维码兑换码 */
	@RequestMapping("/app/coupons/sweepQRcode")
	@Transactional
	public String sweepQRcode(HttpServletRequest request, HttpServletResponse response) throws IOException {
		HashMap<String, Object> map = new HashMap<String, Object>();
		String qrcode;
		Integer userroleid;
		if (request.getParameter("qrcode") == null || "".equals(request.getParameter("qrcode"))) {
			map.put("success", "false");
			map.put("msg", "请先登录");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			qrcode = request.getParameter("qrcode");
		}
		if (request.getParameter("userroleid") == null || "".equals(request.getParameter("userroleid"))) {
			map.put("success", "false");
			map.put("msg", "请先登录");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			userroleid = Integer.parseInt(request.getParameter("userroleid"));
		}
		List<CL_Coupons> coupons = this.couponsDao.getByRedeemCode(qrcode);
		CL_Coupons cps = this.couponsDao.getByRedeemCodeForACTIVE(qrcode);
		if (coupons.size() > 0) {
			CL_CouponsDetail dl = this.couponsDetailDao.getByCouponsId(coupons.get(0).getId());
			if (coupons.get(0).getIsEffective() == 0) {
				map.put("success", "false");
				map.put("msg", "该兑换码已失效！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			} else if (dl != null) {
				map.put("success", "false");
				map.put("msg", "该兑换码已领取！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			} else if (cps != null) {
				CL_CouponsDetail newdetail = new CL_CouponsDetail();
				newdetail.setCouponsId(cps.getId());
				newdetail.setCreator(userroleid);
				newdetail.setIsUse(0);
				newdetail.setUserRoleId(userroleid);
				newdetail.setCreateTime(new Date());
				newdetail.setIsOverdue(0);// 未过期
				this.couponsDetailDao.save(newdetail);
				CL_Message message = new CL_Message();
				message.setReceiver(userroleid);
				message.setTitle("新好运券消息");
				message.setContent("您通过扫取二维码的方式,获取到了一张面额为：" + cps.getDollars() + "好运券,请注意查收并使用!");
				message.setType(1);// 货主
				message.setCreator(userroleid.toString());
				message.setCreateTime(new Date());
				this.messageDao.save(message);
				// CsclPushUtil.SendPushToAllSound(userroleid.toString(),
				// "CPS:您通过扫取二维码的方式,获取到了一张面额为："+cps.getDollars()+"好运券,请注意查收并使用!");
				map.put("success", "true");
				map.put("msg", "领取成功!");
			} else {
				map.put("success", "false");
				map.put("msg", "该兑换码已过期！");
				return writeAjaxResponse(response, JSONUtil.getJson(map));
			}
		} else {
			map.put("success", "false");
			map.put("msg", "无效兑换码！");
		}
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/*** 好运券列表 */
	@RequestMapping("/app/coupons/getOrderCoupons")
	@Transactional
	public String getOrderCoupons(HttpServletRequest request, HttpServletResponse response) throws IOException {
		String number = request.getParameter("number");

		if (String_Custom.noNull(number))
			return this.poClient(response, false, "订单编号未获取到");

		// 获取用户id
		Integer userroleid = ServerContext.getUseronline().get(request.getSession().getId().toString()).getFuserId();
		System.out.println(userroleid);

		// 根据订单编号 获取订单信息
		CL_Order order=orderDao.getByNumber(number);
		if(order==null)
			return this.poClient(response, false, "获取不到该订单信息");
		
		
		List<CL_CouponsDetail> effectiveList=couponsDetailDao.getEffective(userroleid,0,0);
		
		BigDecimal money=order.getFreight();
		
		Iterator<CL_CouponsDetail> iterator = effectiveList.iterator();
		while (iterator.hasNext()) {  
			CL_CouponsDetail value = iterator.next();  
			if(money.compareTo(value.getCompareDollars()) ==-1)
				iterator.remove();
	    }  
		return this.poClient(response, true, JSONUtil.getJson(effectiveList), effectiveList.size());
	}

	/*** 好运券列表 */
	@RequestMapping("/app/coupons/load")
	@Transactional
	public String load(HttpServletRequest request, HttpServletResponse response) throws IOException {
		Integer userroleid;
		// if(!ServerContext.getUseronline().containsKey(request.getSession().getId().toString())){
		// map.put("success", "false");
		// map.put("msg","未登录！");
		// return writeAjaxResponse(response, JSONUtil.getJson(map));
		// //if(ServerContext.getUseronline().get(request.getSession().getId())!=null)
		// }

		// 获取用户id
		userroleid = ServerContext.getUseronline().get(request.getSession().getId().toString()).getFuserId();
		System.out.println(userroleid);

		String pagenum = request.getParameter("pagenum");
		String pagesize = request.getParameter("pagesize");
		String isUse = request.getParameter("isUse");
		String isOverDue = request.getParameter("isOverDue");

		if (String_Custom.noNull(pagesize))
			pagesize = "10";

		String pIsEmpty = String_Custom.parametersEmpty(new String[] { pagenum }, "缺少必要参数");
		if (pIsEmpty.length() != 0)
			return this.poClient(response, false, pIsEmpty);

		if (String_Custom.noNull(isOverDue))
			isOverDue = null;

		// 合法性检测
		if (String_Custom.noNumber(pagenum))
			return this.poClient(response, false, "页数错误!");
		if (String_Custom.noNumber(pagesize))
			return this.poClient(response, false, "页数数量错误!");

		couponsDetailQuery = newQuery(CL_CouponsDetailQuery.class, null);
		couponsDetailQuery.setPageNumber(Integer.parseInt(pagenum));
		couponsDetailQuery.setPageSize(Integer.parseInt(pagesize));
		if (isUse != null) {
			if (String_Custom.noNumber(isUse))
				return this.poClient(response, false, "isUse错误!");
			couponsDetailQuery.setIsUse(Integer.parseInt(isUse));
		}
		if (isOverDue != null) {
			if (String_Custom.noNumber(isOverDue))
				return this.poClient(response, false, "isOverDue错误!");
			couponsDetailQuery.setIsOverdue(Integer.parseInt(isOverDue));
		}
		couponsDetailQuery.setUserRoleId(userroleid);

		Page<CL_CouponsDetail> page = couponsDetailDao.findPage(couponsDetailQuery);
		return this.poClient(response, true, JSONUtil.getJson(page.getResult()), page.getTotalCount());
	}

	/*** 首页好运券领取列表 */
	@RequestMapping("/app/coupons/loadIndexCoupons")
	@Transactional
	public String loadIndexCoupons(HttpServletRequest request, HttpServletResponse response) throws IOException {
		HashMap<String, Object> map = new HashMap<String, Object>();
		Integer userroleid, pageNum, pageSize;
		if (request.getParameter("userroleid") == null || "".equals(request.getParameter("userroleid"))) {
			map.put("success", "false");
			map.put("msg", "请先登录");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			userroleid = Integer.parseInt(request.getParameter("userroleid"));
		}
		if (request.getParameter("pagenum") == null || "".equals(request.getParameter("pagenum"))) {
			map.put("success", "false");
			map.put("msg", "无法获知第几页");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			pageNum = Integer.valueOf(request.getParameter("pagenum"));
		}
		if (request.getParameter("pagesize") == null || "".equals(request.getParameter("pagesize"))) {
			map.put("success", "false");
			map.put("msg", "无法获知每页显示多少条");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			pageSize = Integer.valueOf(request.getParameter("pagesize"));
		}
		couponsQuery = newQuery(CL_CouponsQuery.class, null);
		if (pageNum != null) {
			couponsQuery.setPageNumber(pageNum);
		}
		if (pageSize != null) {
			couponsQuery.setPageSize(pageSize);
		}
		couponsQuery.setType(4);
		couponsQuery.setIsReceive(userroleid);
		Page<CL_Coupons> page = couponsDao.singleFindPage(couponsQuery);
		map.put("success", "true");
		map.put("total", page.getTotalCount());
		map.put("data", page.getResult());
		System.out.println(map.get("data"));
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/*** 首页一键领取好运券 */
	@RequestMapping("/app/coupons/oneKeyReceive")
	@Transactional
	public String oneKeyReceive(HttpServletRequest request, HttpServletResponse response, Integer[] ids)
			throws IOException {
		HashMap<String, Object> map = new HashMap<String, Object>();
		Integer userroleid;
		if (request.getParameter("userroleid") == null || "".equals(request.getParameter("userroleid"))) {
			map.put("success", "false");
			map.put("msg", "请先登录");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			userroleid = Integer.parseInt(request.getParameter("userroleid"));
		}
		if (ids.length > 0) {
			for (Integer id : ids) {
				// 2016-5-18 by lu 用户已领取控制
				if (couponsDetailDao.getCountByUserCoupon(userroleid, id) > 0) {
					continue;
				}
				// CL_Coupons c =this.couponsDao.getById(id);
				CL_CouponsDetail d = new CL_CouponsDetail();
				d.setCouponsId(id);
				d.setUserRoleId(userroleid);
				d.setCreator(userroleid);
				d.setCreateTime(new Date());
				d.setIsUse(0);// 未使用
				d.setIsOverdue(0);// 未过期
				d.setStartTime(new Date());
				Date endtime = new Date();
				endtime.setMonth((new Date()).getMonth() + 1);
				d.setEndTime(endtime);
				this.couponsDetailDao.save(d);
			}
			map.put("success", "true");
			map.put("msg", "操作成功！");
		} else {
			map.put("success", "false");
			map.put("msg", "没有选中好运券！");
		}
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

	/** 计算选完优惠券的运费 **/
	@RequestMapping("/app/coupons/getYfee")
	public String getYfee(HttpServletRequest request, HttpServletResponse response) throws IOException {
		HashMap<String, Object> map = new HashMap<String, Object>();
		BigDecimal fee;
		Integer couponsdetatilid;
		if (request.getParameter("fee") == null || "".equals(request.getParameter("fee"))) {
			map.put("success", "false");
			map.put("data", "没有运费！");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			fee = new BigDecimal(request.getParameter("fee"));
		}
		if (request.getParameter("id") == null || "".equals(request.getParameter("id"))) {
			map.put("success", "false");
			map.put("data", "未选取好运券");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			couponsdetatilid = Integer.parseInt(request.getParameter("id"));
		}
		CL_CouponsDetail detail = this.couponsDetailDao.getById(couponsdetatilid);
		if (detail.getIsUse() == 1) {
			map.put("success", "false");
			map.put("data", "已使用");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else if (detail.getIsOverdue() == 1) {
			map.put("success", "false");
			map.put("data", "已过期");
			return writeAjaxResponse(response, JSONUtil.getJson(map));
		} else {
			
			// 20160906 cd 新增待付款订单校验后的好运券使用控制;
			List<CL_Order> orderlist = orderDao.getBycouponsDetailId(couponsdetatilid);
			for (CL_Order order : orderlist) {
				if (order.getStatus() > 0 && order.getStatus() != 9) {
					if (order.getStatus() == 1)
					{
						return this.poClient(response, false, "被订单"+order.getNumber()+"暂用,请取消该订单!");
					} else {
						return this.poClient(response, false, "已使用");
					}
				} else {
					//还原好运卷为未使用
//					detail.setIsUse(0);
//					couponsDetailDao.update(detail);
					order.setCouponsDetailId(null);
					orderDao.update(order);
				}
			}
			// 20160906 cd 新增待付款订单校验后的好运券使用控制;
			
			CL_Coupons cp = this.couponsDao.getById(detail.getCouponsId());
			if (cp != null) {
				map.put("success", "true");
				map.put("data", fee.subtract(cp.getDollars()).compareTo(BigDecimal.ZERO) <= 0?BigDecimal.ZERO:fee.subtract(cp.getDollars()));

				// 增加提前记录订单好运券
				/*if (request.getParameter("orderId") != null && !"".equals(request.getParameter("orderId"))
						&& !"null".equals(request.getParameter("orderId"))) {
					int orderid = new Integer(request.getParameter("orderId"));
					orderDao.updatecouponsdetailByOrderId(couponsdetatilid, orderid);
				}*/
			} else {
				map.put("success", "false");
				map.put("data", "不存在对应好运券");
			}
		}
		return writeAjaxResponse(response, JSONUtil.getJson(map));
	}

}
