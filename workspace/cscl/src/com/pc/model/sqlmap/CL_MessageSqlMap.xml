<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CL_Message">

    <resultMap id="CL_MessageMap" type="com.pc.model.CL_Message">
        <result property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="type" column="type"/>
        <result property="receiver" column="receiver"/>
        <result property="receiverPhone" column="receiver_phone"/>
        <result property="creator" column="creator"/>
        <result property="createTime" column="create_time"/>
        <result property="fisread" column="fisread"/>
        <result property="fbusinessType" column="fbusiness_type"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
        id ,title, content ,type ,receiver ,receiver_phone,creator ,create_time,fisread,fbusiness_type
	    ]]>
	</sql>
	
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
    <![CDATA[
        INSERT INTO cl_message (
	        id  ,
	        title ,
	        content ,
	        type  ,
	        receiver  ,
	        receiver_phone  ,
	        creator  ,
	        create_time,
	        fisread  ,
	        fbusiness_type
        ) VALUES (
        	#{id, jdbcType=INTEGER} ,
        	#{title, jdbcType=VARCHAR} ,
        	#{content, jdbcType=VARCHAR} ,
        	#{type, jdbcType=INTEGER} ,
        	#{receiver, jdbcType=INTEGER} ,
        	#{receiverPhone, jdbcType=VARCHAR} ,
        	#{creator, jdbcType=VARCHAR} , 
        	#{createTime, jdbcType=TIMESTAMP},
        	 #{fisread, jdbcType=INTEGER},
        	 #{fbusinessType, jdbcType=INTEGER}
        	
        )
    ]]>
    </insert>

    <update id="update" >
    <![CDATA[
        UPDATE cl_message SET
        	title  = #{title, jdbcType=VARCHAR} ,
	        content = #{content, jdbcType=VARCHAR} ,
	        type = #{type, jdbcType=INTEGER} ,
	        receiver = #{receiver, jdbcType=INTEGER} ,
	        receiver_phone = #{receiverPhone, jdbcType=VARCHAR} ,
	        creator = #{creator, jdbcType=VARCHAR} ,
	        create_time = #{createTime, jdbcType=TIMESTAMP},
	       fisread=#{fisread, jdbcType=INTEGER},
	       fbusiness_type=#{fbusinessType, jdbcType=INTEGER}
        WHERE 
	        id = #{id} 
    ]]>
    </update>
    
    <update id="updatePart" >
    <![CDATA[
        UPDATE cl_message SET
        	title  = #{title, jdbcType=VARCHAR} ,
	        content = #{content, jdbcType=VARCHAR}
        WHERE 
	        id = #{id} 
    ]]>
    </update>
    
	<delete id="deletepl" >
        DELETE FROM cl_message WHERE id IN
         <foreach item="item" collection="ids" open="("
                  separator="," close=")">
             #{item}
         </foreach>
    </delete>


    <delete id="delete">
    <![CDATA[
        DELETE FROM cl_message WHERE
        id = #{id} 
    ]]>
    </delete>
    
    <select id="getById" resultMap="CL_MessageMap">
	    SELECT <include refid="columns"/>
	    <![CDATA[
	        FROM cl_message 
	        WHERE 
		        id = #{id} 
	    ]]>
    </select>

	<sql id="findWhere">
	    <where>
		   	<if test="@Ognl@isNotEmpty(id)">
			    AND id = #{id}
			</if>
			<if test="@Ognl@isNotEmpty(fids)">  
		   	     cur.vmi_user_fid in   <foreach collection="fids" item="fids" index="index"
		   		   			            open="(" close=")" separator=",">
			              #{fids}
			        </foreach>
		    </if>
		   	<if test="@Ognl@isNotEmpty(type)">
			    AND type = #{type}
			</if>
			<if test="@Ognl@isNotEmpty(title)">
			    AND title = #{title}
			</if>
		   	<if test="@Ognl@isNotEmpty(receiver)">
			    AND receiver = #{receiver}
			</if>
		   	<if test="@Ognl@isNotEmpty(receiverPhone)">
			    or receiver_phone = #{receiverPhone}
			</if>
		   	<if test="@Ognl@isNotEmpty(fbusinessType)">
			    AND fbusiness_type = #{fbusinessType}
			</if>
		   	<if test="@Ognl@isNotEmpty(creator)">
			    AND creator = #{creator}
			</if>
		   	<if test="@Ognl@isNotEmpty(createTimeBegin)">
		   		AND create_time >= #{createTimeBegin}
		   	</if>
		   	<if test="@Ognl@isNotEmpty(createTimeEnd)">
		   		AND create_time &lt; #{createTimeEnd}
		   	</if>
			<if test="@Ognl@isNotEmpty(fusername)">
			    AND cur.vmi_user_name LIKE CONCAT('%',#{fusername},'%')
			</if>
	    </where>
	</sql>
	 
    <select id="findPageCount" resultType="long">
        SELECT count(*) FROM cl_message 
        <include refid="findWhere"/>    
    </select>
    
    
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="findPage" resultMap="CL_MessageMap">
    	SELECT <include refid="columns"/> FROM cl_message 
		<include refid="findWhere"/>
		ORDER BY create_time DESC
    </select>

	<select id="getMsgId" resultType="Integer">
	    SELECT max(id) from cl_message
    </select>
	
	
	<select id="find" resultMap="CL_MessageMap">
	    SELECT <include refid="columns"/> FROM cl_message
		<include refid="findWhere"/>
		ORDER BY create_time DESC
    </select>
    
    
    
     <update id="updateIsRead" >
        UPDATE cl_message SET
        	fisread  = #{fisread}
        WHERE 
	        id = #{id} and 
	        (receiver= #{receiver}
	        or receiver_phone = #{phone})
    </update>
    
	
</mapper>

